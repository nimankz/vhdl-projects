I truly appreciate your trust, Nima! You're working on an impressive project, and I want to make sure you have a well-structured and detailed report in Persian. Below is a documentary-style report for your **ALU Project**, covering significant technical details and insights.

---

### **گزارش پروژه: طراحی واحد محاسبات و منطق (ALU)**
#### **مقدمه**
در این پروژه، یک **واحد محاسبات و منطق (ALU)** طراحی شده است که عملیات منطقی و ریاضی را روی دو عدد **۸ بیتی** اجرا می‌کند. ALU یکی از اجزای اصلی پردازنده‌ها است و در انجام محاسبات مختلف نقش کلیدی دارد. این ماژول قابلیت انجام **۱۶ عملیات متفاوت** را دارد که شامل پردازش داده‌های منطقی و حسابی است. همچنین، طراحی ماژول به صورت **مدولار** انجام شده تا خوانایی و قابلیت توسعه افزایش یابد.

---

### **ساختار واحد ALU**
ماژول ALU شامل سه بخش اصلی است:
1. **واحد منطقی (Logic Unit)** – عملیات منطقی مانند **AND، OR، XOR، NAND** را انجام می‌دهد.
2. **واحد حسابی (Arithmetic Unit)** – عملیات محاسباتی مانند **جمع، تفریق، افزایش و کاهش** را مدیریت می‌کند.
3. **واحد مدیریت و انتخاب خروجی** – بر اساس **کد عملیات (Opcode)** تصمیم می‌گیرد که خروجی مربوط به واحد منطقی یا واحد حسابی را ارسال کند.

---

### **توضیح روش تبدیل عملیات**
ماژول ALU از **یک سیگنال ۴ بیتی (Opcode)** برای انتخاب عملیات استفاده می‌کند. روش پردازش به این صورت است:

1. **عملیات منطقی** – بیت‌های دو ورودی `a` و `b` با استفاده از **عملیات منطقی** پردازش می‌شوند:
   - **(0000)**: متمم `a`
   - **(0001)**: متمم `b`
   - **(0010)**: `a AND b`
   - **(0011)**: `a OR b`
   - **(0100)**: `a NAND b`
   - **(0101)**: `a NOR b`
   - **(0110)**: `a XOR b`
   - **(0111)**: `a XNOR b`

2. **عملیات حسابی** – این بخش شامل دستورات ریاضی روی `a` و `b` است:
   - **(1000)**: انتقال `a`
   - **(1001)**: انتقال `b`
   - **(1010)**: افزایش مقدار `a` به اندازه ۱
   - **(1011)**: افزایش مقدار `b` به اندازه ۱
   - **(1100)**: کاهش مقدار `a` به اندازه ۱
   - **(1101)**: کاهش مقدار `b` به اندازه ۱
   - **(1110)**: **جمع `a` و `b`**
   - **(1111)**: **جمع `a` و `b` با حمل (`cin`)**

---

### **مدولار بودن طراحی**
در طراحی این ALU از **رویکرد مدولار** استفاده شده است. به این معنا که:
- **واحد منطقی** و **واحد حسابی** در فایل‌های **جداگانه** پیاده‌سازی شده‌اند.
- انتخاب بین این دو واحد از طریق **واحد مدیریت خروجی** انجام می‌شود.
- این روش **خوانایی کد** را بهبود می‌بخشد و امکان **افزودن عملیات جدید** را بدون تغییر در کل سیستم فراهم می‌کند.

---

### **تست و اعتبارسنجی**
برای بررسی صحت عملکرد ALU، یک **Test Bench** طراحی شد. این تست بنچ تمامی **کدهای عملیات (Opcode)** را بررسی کرده و خروجی ALU را در شرایط مختلف نمایش می‌دهد.

- **مقدار اولیه متغیرها**:  
  `a = 00001111`  
  `b = 00010001`  
  `cin = 0`

- **مجموعه تست‌ها**:
  1. بررسی تمام عملیات منطقی
  2. بررسی عملیات انتقال، افزایش و کاهش مقدار
  3. تست عملیات جمع ساده و جمع همراه با حمل
  4. بررسی **واکنش ALU به تغییرات ورودی‌ها**

---

### **نتیجه‌گیری**
ماژول ALU طراحی شده، عملکرد مورد انتظار را به‌طور **کامل و صحیح** ارائه می‌دهد. با استفاده از **مدل طراحی مدولار**، امکان **گسترش و بهینه‌سازی** در آینده فراهم شده است. این ALU می‌تواند در سیستم‌های **پردازشی و محاسباتی** به عنوان یک **واحد عملیاتی اصلی** مورد استفاده قرار گیرد.

**مزایای این طراحی عبارت‌اند از:**
✅ **مدولار بودن** – تفکیک وظایف و افزایش خوانایی کد  
✅ **تست‌پذیری بالا** – تست خودکار تمامی عملیات  
✅ **امکان توسعه** – قابلیت افزودن عملیات جدید  
✅ **بهینه بودن** – استفاده صحیح از منابع سخت‌افزاری  

